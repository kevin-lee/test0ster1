apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven {
      url  "http://dl.bintray.com/kt3k/gradle-plugins"
    }
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

//plugins {
//  id "com.jfrog.bintray" version "1.1"
//}

description = "test0ster1"

version = '0.0.6'

//task wrapper(type: Wrapper) {
//    gradleVersion = '2.3'
//}

def projectSourceEncoding = 'UTF-8'
def projectJavaVersion = '1.8'
def junitJupiterVersion = '5.5.0'

sourceCompatibility = projectJavaVersion
targetCompatibility = projectJavaVersion

compileJava.options.encoding = projectSourceEncoding

project.version = version
project.group = 'kevinlee'

repositories {
  mavenLocal()
  mavenCentral()
}

uploadArchives {
  repositories {
    mavenDeployer {
//      repository(url: 'https://repo.kevinlee.io/repository/kevin-public-releases') {
//        authentication(userName: hasProperty('mavenDeployUser') ? mavenDeployUser : "", password: hasProperty('mavenDeployPassword') ? mavenDeployPassword : "")
//      }
      snapshotRepository(url: 'https://repo.kevinlee.io/repository/kevin-public-snapshots') {
        authentication(userName: hasProperty('mavenDeployUser') ? mavenDeployUser : "", password: hasProperty('mavenDeployPassword') ? mavenDeployPassword : "")
      }
    }
  }
}

tasks.withType(JavaCompile) {
  options.encoding = projectSourceEncoding
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

dependencies {
  testCompile "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}",
      "org.assertj:assertj-core:3.12.2",
      "org.mockito:mockito-core:3.0.0"
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Test0ster1',
        'Implementation-Version': version
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar
      artifact javadocJar
    }
  }
}

bintray {
  user = project.hasProperty('bintrayUser') ? bintrayUser : ""
  key = project.hasProperty('bintrayPass') ? bintrayPass : ""

//        configurations = ['deployables'] //When uploading configuration files
  publications = ['mavenJava']

  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'maven'
    name = 'test0ster1'
    desc = "Test0ster1 (pronounced as 'Testosterone', Testosterone -> Test0sterone -> Test0ster(one == 1) -> Test0ster1 ) is a test framework which uses Java 8's new functional features (i.e. Lambda Expressions, Default Methods, etc.)"
    websiteUrl = 'https://github.com/Kevin-Lee/test0ster1'
    issueTrackerUrl = 'https://github.com/Kevin-Lee/test0ster1/issues'
    vcsUrl = 'https://github.com/Kevin-Lee/test0ster1.git'
    licenses = ['Apache-2.0']
    labels = ['Java', 'Java8', 'Test']
    publicDownloadNumbers = true

    //Optional version descriptor
    version {
      name = project.version //Bintray logical version name
    }
  }
}
